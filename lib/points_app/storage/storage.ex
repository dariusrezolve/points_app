defmodule PointsApp.Storage do
  @moduledoc """
  The Storage context.
  """

  import Ecto.Query, warn: false
  alias PointsApp.Repo

  alias PointsApp.Storage.User

  def get_users_with_more_points_than(points) do
    Repo.all(
      from u in User,
        where: u.points > ^points,
        limit: 2
    )
  end

  def update_all_users_in_batches do
    # as an optimization we could just consider the row count to be the one we used for seeding
    # and therefore not need to do a count query
    no_of_rows = Repo.one(from u in User, select: count())
    batch_size = 100_000
    # no transaction is needed here
    Enum.each(0..div(no_of_rows, batch_size), fn i ->
      Ecto.Adapters.SQL.query!(
        Repo,
        "update users set points = floor(random() * 101), updated_at = now() where id in (select  id from users offset #{i * batch_size} limit #{batch_size})"
      )
    end)
  end

  def update_all_users_at_once() do
    # update_all does not update autogenerated fields (updated_at)
    # ~ 20 seconds full update

    from(u in User,
      update: [set: [points: fragment("floor(random() * 101)"), updated_at: fragment("now()")]]
    )
    |> Repo.update_all([])
  end

  @doc """
  Returns the list of users.

  ## Examples

      iex> list_users()
      [%User{}, ...]

  """
  def list_users do
    Repo.all(User)
  end

  @doc """
  Gets a single user.

  Raises `Ecto.NoResultsError` if the User does not exist.

  ## Examples

      iex> get_user!(123)
      %User{}

      iex> get_user!(456)
      ** (Ecto.NoResultsError)

  """
  def get_user!(id), do: Repo.get!(User, id)

  @doc """
  Creates a user.

  ## Examples

      iex> create_user(%{field: value})
      {:ok, %User{}}

      iex> create_user(%{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def create_user(attrs \\ %{}) do
    %User{}
    |> User.changeset(attrs)
    |> Repo.insert()
  end

  @doc """
  Updates a user.

  ## Examples

      iex> update_user(user, %{field: new_value})
      {:ok, %User{}}

      iex> update_user(user, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  """
  def update_user(%User{} = user, attrs) do
    user
    |> User.changeset(attrs)
    |> Repo.update()
  end

  @doc """
  Deletes a user.

  ## Examples

      iex> delete_user(user)
      {:ok, %User{}}

      iex> delete_user(user)
      {:error, %Ecto.Changeset{}}

  """
  def delete_user(%User{} = user) do
    Repo.delete(user)
  end

  @doc """
  Returns an `%Ecto.Changeset{}` for tracking user changes.

  ## Examples

      iex> change_user(user)
      %Ecto.Changeset{data: %User{}}

  """
  def change_user(%User{} = user, attrs \\ %{}) do
    User.changeset(user, attrs)
  end
end
